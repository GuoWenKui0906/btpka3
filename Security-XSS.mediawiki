跨站脚本攻击(XSS - Cross Site Scripting)
原理
Web程序将数据直接作为HTML显示（未进行HTML特殊字符转义、script脚本过滤），在浏览器端显示的这些内容的时候，激活其中包含的JavaScript恶意脚本，这些脚本可以用来获取用户敏感信息，追踪用户浏览历史、将用户诱导至其他网站等。

关键点
找到可以注入Script脚本的地方。

大致分类：
* Stored XSS Attacks：风险代码被先持久存储于服务器上（比如：数据库中），在读取出来显示到浏览器。比如在博客上发表文章、发表评论。
* Reflected XSS Attacks：
* DOM Based XSS：


注入点
1. 客户端：来自用户输入，却未作安全检查。

<source>
    <img src="https://www.owasp.org/skins/monobook/ologo.png" onload="alert('XSS');" >
</source>
2.
2. 服务器端：来自配置文件，却未作安全检查（比如消息模板，头部文件）

DOM Based XSS
  你的程序本身存在一些依赖于来自于客户端的数据并展示，但是对来源数据为做安全检查。



防范方式
<ref>{{cite web
| accessdate =1 January 2012
| publisher = Stackexchange
| location = http://dba.stackexchange.com/questions/607/what-is-a-key-value-store-database
| title = Key Value stores and the NoSQL movement
| author = Sandy
| date = 14 January 2011
| url = http://dba.stackexchange.com/a/619
| quote = Key&ndash;value stores allow the application developer to store schema-less data. This data usually consists of a string that represents the key, and the actual data that is considered to be the value in the "key&ndash;value" relationship. The data itself is usually some kind of primitive of the programming language (a string, an integer, or an array) or an object that is being marshaled by the programming language's bindings to the key&ndash;value store. This structure replaces the need for a fixed data model and allows proper formatting.}}</ref>


参考：
* [https://www.owasp.org/index.php/Cross-site_Scripting_(XSS) Cross site Scripting ]
* [https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet XSS Filter Evasion Cheat Sheet]

Cross-Site Request Forgery (CSRF)